using Content.Client.UserInterface.ControlExtensions;
using Content.Shared._RMC14.Overwatch;
using Content.Shared.Mobs;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using static Robust.Client.UserInterface.Controls.BaseButton;

namespace Content.Client._RMC14.Overwatch;

[GenerateTypedNameReferences]
public sealed partial class OverwatchSquadView : Control
{
    public event Action? OnStop;

    public OverwatchSquadView()
    {
        RobustXamlLoader.Load(this);
        TabContainer.SetTabTitle(SquadMonitor, "Squad Monitor");
        StopOverwatchButton.OnPressed += OnStopOverwatchPressed;
    }

    private void OnStopOverwatchPressed(ButtonEventArgs obj)
    {
        OnStop?.Invoke();
    }

    private void MakeAllVisible(Control control)
    {
        foreach (var child in control.Children)
        {
            child.Visible = true;
        }
    }

    private void MakeAllVisible()
    {
        MakeAllVisible(Names);
        MakeAllVisible(Roles);
        MakeAllVisible(States);
        MakeAllVisible(Locations);
        MakeAllVisible(Distances);
        MakeAllVisible(Buttons);
    }

    private void MakeControlVisible(Control control, int index, bool visible)
    {
        if (index >= control.ChildCount)
            return;

        control.GetChild(index).Visible = visible;
    }

    private void MakeViewVisible(int index, bool visible)
    {
        MakeControlVisible(Names, index, visible);
        MakeControlVisible(Roles, index, visible);
        MakeControlVisible(States, index, visible);
        MakeControlVisible(Locations, index, visible);
        MakeControlVisible(Distances, index, visible);
        MakeControlVisible(Buttons, index, visible);
    }

    public void UpdateResults(OverwatchLocation? location, bool showDead, bool showHidden, List<OverwatchMarine> marines, OverwatchConsoleComponent console)
    {
        var text = SearchBar.Text;
        if (string.IsNullOrWhiteSpace(text) &&
            location == null &&
            showDead &&
            showHidden)
        {
            MakeAllVisible();
            return;
        }

        for (var i = 0; i < Names.ChildCount; i++)
        {
            var name = Names.GetChild(i);
            var role = Roles.GetChild(i);
            if (!string.IsNullOrWhiteSpace(text))
            {
                if (!name.ChildrenContainText(text) && !role.ChildrenContainText(text))
                {
                    MakeViewVisible(i, false);
                    continue;
                }
            }

            if (location != null)
            {
                if (i >= marines.Count || marines[i].Location != location)
                {
                    MakeViewVisible(i, false);
                    continue;
                }
            }

            if (!showDead)
            {
                if (i >= marines.Count || marines[i].State != MobState.Alive)
                {
                    MakeViewVisible(i, false);
                    continue;
                }
            }

            if (!showHidden)
            {
                var hidden = console.Hidden;
                if (i >= marines.Count || hidden.Contains(marines[i].Marine))
                {
                    MakeViewVisible(i, false);
                    continue;
                }
            }

            MakeViewVisible(i, true);
        }
    }
}
